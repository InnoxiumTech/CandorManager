plugins {

    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id "com.jfrog.bintray" version '1.8.5'
}

def props = new Properties()
file("bintray.properties").withInputStream { props.load(it) }

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = System.getProperty("os.arch").contains("64") ? "natives-windows" : "natives-windows-x86"
        break
}

group 'me.shadowchild.candor'
version 'snapshot'

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java'

sourceCompatibility = 14

//mainClassName = 'me.shadowchild.candor.CandorLauncher'

repositories {

    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven {

        name 'Cybernize Bintray Repo'
        url 'https://dl.bintray.com/candor/cybernize'
    }
}

dependencies {

    implementation 'me.shadowchild.cybernize:cybernize:1.0.2'
    implementation 'com.electronwill.night-config:toml:3.6.3'
    implementation 'com.miglayout:miglayout:3.7.4'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.guava:guava:29.0-jre'
    implementation "org.apache.commons:commons-lang3:3.10"
    implementation "commons-io:commons-io:2.7"
    implementation "org.apache.commons:commons-math3:3.6.1"

    // Flat LAF
    implementation 'com.formdev:flatlaf:0.38'

    implementation platform("org.lwjgl:lwjgl-bom:3.2.4-SNAPSHOT")

    // We want native file dialogs, lets use LWJGL for that
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-tinyfd"
    runtimeOnly "org.lwjgl:lwjgl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-nfd::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-nfd::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-nfd::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-tinyfd::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-tinyfd::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-tinyfd::natives-linux"

//    compile project(":core")
//    compile project(":gui")
//    compile project(":entry")
//    compile project(":genericmodule")
}

jar {

//    archiveBaseName = 'CandorManager'
//    archiveClassifier = ''

    manifest {

        attributes 'Main-Class': 'me.shadowchild.candor.CandorLauncher'
        attributes 'Premain-Class': 'ca.cgjennings.jvm.JarLoader'
        attributes 'SplashScreen-Image': 'splash.png'
    }
}

shadowJar {

    archiveBaseName = 'CandorManager'
    archiveClassifier = ''

    manifest {

        attributes 'Main-Class': 'me.shadowchild.candor.CandorLauncher'
        attributes 'Premain-Class': 'ca.cgjennings.jvm.JarLoader'
        attributes 'SplashScreen-Image': 'splash.png'
    }
}

task copyJars(type: Copy) {

    dependsOn 'shadowJar'

    from "$buildDir/libs"
    include "*.jar"
    into "$buildDir/packaged"
}

task copyScripts(type: Copy) {

    dependsOn 'copyJars'

    from "$projectDir/scripts"
    into "$buildDir/packaged"
}

task zipCandor(type: Zip) {

    dependsOn 'copyScripts'

    from "$buildDir/packaged"
    include '*'
    include '*/*'
    exclude '*.zip'
    archiveFileName = 'CandorModManager.zip'
    destinationDirectory = file("$buildDir/packaged")
}

task packageCandor {

    dependsOn 'clean', 'zipCandor'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.withType(Javadoc) {

    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

jar.finalizedBy javadocJar
jar.finalizedBy sourcesJar

//shadowJar.finalizedBy javadocJar
//shadowJar.finalizedBy sourcesJar



publishing {

    publications {

        CandorPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'me.shadowchild.candor'
            artifactId 'candor-full'
            version '0.1.2'
        }
    }
}

bintray {

//    dryRun = true
    user = props.get("username")
    key = props.get("apiKey")
    publications = ['CandorPublication']
//    filesSpec {
//
//        from 'build/libs'
//        exclude 'CandorManager-snapshot.jar'
//        into '.'
//    }
    pkg {

        repo = 'candor-alpha'
        name = 'candor-full'
        userOrg = 'candor'
        vcsUrl = 'https://github.com/ShadowChild/CandorManager.git'
        licenses = ['MIT']
        version {

            name = '0.1.2'
            desc = ' Initial Test Release For Candor'
            released = new Date()
        }
    }
}


